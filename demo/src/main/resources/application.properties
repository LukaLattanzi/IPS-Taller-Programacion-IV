# Configuración de H2 con persistencia en disco
# La base de datos se almacenará en el directorio ./data/demo-db
spring.datasource.url=jdbc:h2:file:./data/demo-db
# spring.datasource.url: Define la URL de conexión a la base de datos.
# - jdbc:h2:file:./data/demo-db: Usa H2 con persistencia en disco, almacenando los datos en el archivo ./data/demo-db.
# - jdbc:h2:mem:testdb: Usa H2 en memoria (los datos se pierden al reiniciar la aplicación).
# Puedes cambiar "./data/demo-db" por otro nombre o ruta para personalizar el archivo de la base de datos.

spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.driverClassName: Especifica el driver JDBC para conectarse a la base de datos.
# En este caso, se usa el driver de H2 (org.h2.Driver).

spring.datasource.username=sa
# spring.datasource.username: Define el nombre de usuario para conectarse a la base de datos.
# Por defecto, H2 usa "sa" como usuario. Puedes cambiarlo por otro nombre, como "admin" o "mi_usuario".

spring.datasource.password=
# spring.datasource.password: Define la contraseña para conectarse a la base de datos.
# Por defecto, H2 no requiere contraseña (campo vacío). Puedes establecer una contraseña personalizada, como "mi_contraseña".

# Dialecto de Hibernate para H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# spring.jpa.database-platform: Especifica el dialecto de Hibernate que se usará para interactuar con la base de datos.
# - org.hibernate.dialect.H2Dialect: Dialecto para H2.
# - org.hibernate.dialect.MySQLDialect: Dialecto para MySQL.
# - org.hibernate.dialect.PostgreSQLDialect: Dialecto para PostgreSQL.
# Cambia este valor si decides usar otra base de datos.

# Crear y actualizar automáticamente las tablas en la base de datos
spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.ddl-auto: Controla cómo Hibernate gestiona el esquema de la base de datos.
# - update: Actualiza el esquema de la base de datos sin eliminar datos existentes.
# - create: Crea el esquema desde cero (elimina los datos existentes).
# - create-drop: Crea el esquema al iniciar la aplicación y lo elimina al cerrarla.
# - validate: Verifica que el esquema de la base de datos coincida con las entidades JPA.
# - none: No realiza ninguna acción sobre el esquema.
# Cambia este valor según tus necesidades (por ejemplo, "create" para desarrollo inicial o "validate" para producción).

# Habilitar la consola H2 para inspeccionar la base de datos
spring.h2.console.enabled=true
# spring.h2.console.enabled: Habilita o deshabilita la consola web de H2.
# - true: Habilita la consola.
# - false: Deshabilita la consola.

spring.h2.console.path=/h2-console
# spring.h2.console.path: Define la ruta de acceso a la consola H2.
# Por defecto, es "/h2-console". Puedes cambiarlo por otra ruta, como "/mi-consola".

# Opcional: Configuración de logs para depuración de consultas SQL
spring.jpa.show-sql=true
# spring.jpa.show-sql: Muestra las consultas SQL generadas por Hibernate en la consola.
# - true: Habilita los logs de SQL.
# - false: Deshabilita los logs de SQL.

spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.format_sql: Formatea las consultas SQL para que sean más legibles en los logs.
# - true: Habilita el formato legible.
# - false: Deshabilita el formato legible.